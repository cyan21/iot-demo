template: true
valuesFilePath: values.yml  

resources:

#########################################################
#### RESOURCE DOCKER PIPELINE
##########################################################

  - name: {{ .Values.DemoAppContainerResources.gitRepo.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.DemoAppContainerResources.gitRepo.gitProvider }}
      path: {{ .Values.DemoAppContainerResources.gitRepo.path }}
      branches:
        include: {{ .Values.DemoAppContainerResources.gitRepo.branches.include }}
      # files:
      #   exclude: {{ .Values.DemoAppContainerResources.gitRepo.files.exclude }}
      # buildOn:
      #    commit: {{ .Values.DemoAppContainerResources.gitRepo.buildOnCommit }}

  - name: {{ .Values.DemoAppContainerResources.buildInfo.resourceName }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.DemoApp.artifactoryIntegration }}
      buildName: {{ .Values.DemoAppContainerResources.buildInfo.name }}
      buildNumber: ${run_number}

  - name: {{ .Values.DemoAppContainerResources.buildInfoPromotion.resourceName }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.DemoApp.artifactoryIntegration }}
      buildName: {{ .Values.DemoAppContainerResources.buildInfo.name }}
      buildNumber: ${run_number}

  - name: {{ .Values.DemoAppContainerResources.propertyBag.name }}
    type: PropertyBag
    configuration:
      newTag: XXX


#########################################################
#### RESOURCE DISTRIB PIPELINE
##########################################################

  - name: {{ .Values.DemoAppDistributionResources.releaseBundle.resourceName }}
    type: ReleaseBundle
    configuration:
      sourceDistribution: {{ .Values.DemoApp.distributionIntegration }}
      name: {{ .Values.DemoApp.releaseBundleName }}
      version: "1"          # will be overriden by the CreateReleaseBundle step 
      isSigned: {{ .Values.DemoAppDistributionResources.releaseBundle.isSigned }}

  - name: {{ .Values.DemoAppDistributionResources.aql.name }}
    type: Aql
    configuration:
      sourceArtifactory: {{ .Values.DemoApp.artifactoryIntegration }}
      query: > 
        items.find({
        "$and": [
        {"path": "{{ .Values.DemoApp.container.image }}/${runVarImageTag}"},
        {"repo": "{{ .Values.DemoApp.container.repoPromotion1 }}"},
        {"name": "manifest.json"}
        ]})
      addedProperties:
        distribution: "automatic"
      mappings:
        - name: docker
          input: "{{ .Values.DemoApp.container.repoPromotion1 }}/(.*)"
          output: "{{ .Values.DemoAppDistributionResources.aql.edgeRepo }}/$1"

  - name:  {{ .Values.DemoAppDistributionResources.distributionRule.name }}
    type: DistributionRule
    configuration:
      sourceDistribution: {{ .Values.DemoApp.distributionIntegration }}
      serviceName: "{{ .Values.DemoAppDistributionResources.distributionRule.serviceName }}"       
      siteName: "{{ .Values.DemoAppDistributionResources.distributionRule.siteName }}"
      cityName: "{{ .Values.DemoAppDistributionResources.distributionRule.cityName }}"
      countryCodes:
      {{- range .Values.DemoAppDistributionResources.distributionRule.countryCodes }}
        - "{{ . }}"
      {{- end }}  
        
pipelines:


#########################################################
#### DOCKER PIPELINE
##########################################################

  - name: {{ .Values.DemoApp.pipelineContainerName }}
    steps:
      - name: {{ .Values.DemoAppContainerSteps.dockerBuild.name }}
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: {{ .Values.DemoAppContainerSteps.dockerBuild.dockerFileName }}
          dockerFileLocation: {{ .Values.DemoAppContainerSteps.dockerBuild.dockerFileLocation }}
          dockerImageName: "{{ .Values.DemoApp.container.registry }}/{{ .Values.DemoApp.container.image }}"
          dockerImageTag: {{ .Values.DemoApp.container.tag }}
          inputResources:
            - name: {{ .Values.DemoAppContainerResources.gitRepo.name }}
          integrations:
            - name: {{ .Values.DemoApp.artifactoryIntegration }}
        execution:
          onStart:
            - cd ${res_{{ .Values.DemoAppContainerResources.gitRepo.name }}_resourcePath}
            - echo ${{{ .Values.DemoApp.container.registry }}/\//\\/}
            - make prep STATUS={{ .Values.DemoApp.status }} VERSION={{ .Values.DemoApp.container.tag }} REGISTRY=${{{ .Values.DemoApp.container.registry }}/\//\\/} BASE_IMAGE_VERSION={{ .Values.DemoApp.container.baseImageTag }} 

      - name: {{ .Values.DemoAppContainerSteps.dockerPush.name }}
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: {{ .Values.DemoApp.container.repoSource }}
          autoPublishBuildInfo: {{ .Values.DemoAppContainerSteps.dockerPush.autoPublishBuildInfo }}
          inputSteps:
            - name: {{ .Values.DemoAppContainerSteps.dockerBuild.name }}
          integrations:
            - name: {{ .Values.DemoApp.artifactoryIntegration }}
          outputResources:
            - name: {{ .Values.DemoAppContainerResources.buildInfo.resourceName }}
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_{{ .Values.DemoApp.artifactoryIntegration }}_url/%artifactory/ui}/pipelines/myPipelines/{{ .Values.DemoAppContainerResources.buildInfo.name }}/${run_number}/setup_env?branch=${runBranchName}"
          # onSuccess:
          #   - echo "{{ .Values.DemoAppContainerSteps.dockerPush.artifactoryTargetRepoName }}/{{ .Values.DemoAppContainerSteps.dockerBuild.imageName }}/${runVarAppVersion}/manifest.json"
          #   - jfrog rt sp --build=${res_{{ .Values.DemoAppContainerResources.buildInfo.resourceName }}_buildName}/${run_number} {{ .Values.DemoAppContainerSteps.dockerPush.artifactoryTargetRepoName }}/{{ .Values.DemoAppContainerSteps.dockerBuild.imageName }}/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

      - name: {{ .Values.DemoAppContainerSteps.xray.name }}
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: {{ .Values.DemoAppContainerResources.buildInfo.resourceName }}
              trigger: true

      - name: {{ .Values.DemoAppContainerSteps.promotion.name }}
        type: PromoteBuild
        configuration:
          targetRepository: {{ .Values.DemoApp.container.repoPromotion1 }}
          includeDependencies: {{ .Values.DemoAppContainerSteps.promotion.includeDependencies }}
          status: {{ .Values.DemoAppContainerSteps.promotion.status }}
          comment: {{ .Values.DemoAppContainerSteps.promotion.comment }}
          copy: {{ .Values.DemoAppContainerSteps.promotion.copy }}
          integrations:
            - name: {{ .Values.DemoApp.artifactoryIntegration }}
#            - name: iot_slack
          inputResources:
            - name: {{ .Values.DemoAppContainerResources.buildInfo.resourceName }}
              trigger: true
          inputSteps:
            - name: {{ .Values.DemoAppContainerSteps.xray.name }}
          outputResources:
            - name: {{ .Values.DemoAppContainerResources.buildInfoPromotion.resourceName }}
            - name: {{ .Values.DemoAppContainerResources.propertyBag.name }}
        execution:
          onSuccess:
            - write_output {{ .Values.DemoAppContainerResources.propertyBag.name }} newTag={{ .Values.DemoApp.container.tag }}
#            - send_notification iot_slack --text "starting test_step_1" --recipient "#iot-demo-notifications"


#########################################################
#### DISTRIB PIPELINE
##########################################################


  - name: {{ .Values.DemoApp.pipelineDistributionName }}
    steps:
      - name: {{ .Values.DemoAppDistributionSteps.initPipeline.name }}
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.DemoAppContainerResources.propertyBag.name }}
          outputResources:
            - name: {{ .Values.DemoAppDistributionResources.aql.name }}
        execution:
          onExecute:
            - echo "init distribution"
            - add_run_variables runVarImageTag=${res_{{ .Values.DemoAppContainerResources.propertyBag.name }}_newTag}

      - name: {{ .Values.DemoAppDistributionSteps.createRB.name }}
        type: CreateReleaseBundle 
        configuration:
          releaseBundleName: {{ .Values.DemoApp.releaseBundleName }} 
          releaseBundleVersion: ${runVarImageTag} 
          sign: true
          dryRun: {{ .Values.DemoAppDistributionResources.releaseBundle.dryRun.create }}
          description: automatic creation 
          releaseNotes:
            syntax: markdown
            content: |
              # Description 
              super release 
              * Feature 1 
              * Bigfix 1
          inputResources:
            - name: {{ .Values.DemoAppDistributionResources.aql.name }}
          outputResources:
            - name: {{ .Values.DemoAppDistributionResources.releaseBundle.resourceName }} 

      - name: {{ .Values.DemoAppDistributionSteps.distributeRB.name }}
        type: DistributeReleaseBundle
        configuration:
          dryRun: {{ .Values.DemoAppDistributionResources.releaseBundle.dryRun.distribute }} 
          inputResources:
            - name: {{ .Values.DemoAppDistributionResources.distributionRule.name }}
              trigger: true   
            - name: {{ .Values.DemoAppDistributionResources.releaseBundle.resourceName }}  
              trigger: true  